@max_width          : 960px;
@max_less           : @max_width - 1;
@iPhone_portrait    : 300px;
@iPhone_landscape   : 480px;
@iPad_portrait      : 740px;

#grid > #system(12, @max_width);
// #grid > #system(16, @max_width);
// #grid > #system(24, @max_width);

/* Grids.less */
#grid {
    // used in media query sections to redefine the grid widths
    #respond (@width) {
        body { min-width: @width; }
        [class*="container"] { width: @width !important; }
    }

    #system (@grid, @width, @gutter :20px) {
        #container () {
            margin: 0 auto;
            width: @width;
            zoom: 1;

             &:before
            ,&:after {
                clear: both;
                content: '.';
                display: block;
                overflow: hidden;
                visibility: hidden;
                font-size: 0;
                line-height: 0;
                width: 0;
                height: 0;
            }

            // sets up a tiled background to show where the grid and gutters are within a container
            &.show_columns {
                @_width: @width / @grid - @gutter;
                background-image: -webkit-linear-gradient(0, transparent @_width, rgba(0, 0, 0, 0.07) @_width);
                background-image:    -moz-linear-gradient(0, transparent @_width, rgba(0, 0, 0, 0.07) @_width);
                background-image:     -ms-linear-gradient(0, transparent @_width, rgba(0, 0, 0, 0.07) @_width);
                background-image:      -o-linear-gradient(0, transparent @_width, rgba(0, 0, 0, 0.07) @_width);
                background-image:         linear-gradient(0, transparent @_width, rgba(0, 0, 0, 0.07) @_width);
                background-position: @gutter / 2 0px;
                background-size: @_width + @gutter;
            }
        }

        #grid (@grid, @index) when (@grid <  @index) {display: none;}
        #grid (@grid, @index) when (@grid >= @index) {
            display: inline;
            float: left;
            margin: 0 @gutter / 2;
            position: relative;
            width: (@width / @grid * @index) - @gutter;
        }

        #pref (@grid, @index) when (@grid <  @index) {display: none;}
        #pref (@grid, @index) when (@grid >= @index) {
            padding-left: (@width / @grid * @index);
        }

        #pull (@grid, @index) when (@grid <  @index) {display: none;}
        #pull (@grid, @index) when (@grid >= @index) {
            position: relative;
            left: -(@width / @grid * @index);
        }

        #push (@grid, @index) when (@grid <  @index) {display: none;}
        #push (@grid, @index) when (@grid >= @index) {
            position: relative;
            left: (@width / @grid * @index);
        }

        #suff (@grid, @index) when (@grid <  @index) {display: none;}
        #suff (@grid, @index) when (@grid >= @index) {
            padding-right: (@width / @grid * @index);
        }

        (~".container_@{grid}") {
            #container();

            // DANGER! recursion!
            // build all of the selectors and rules for [grid, prefix, pull, push, suffix]
            .loop (0) {}
            .loop (@index) when (@index > 0) {
                // string expansion to write all of the selectors
                (~".grid_@{index}")   { #grid(@grid, @index); }
                (~".prefix_@{index}") { #pref(@grid, @index); }
                (~".pull_@{index}")   { #pull(@grid, @index); }
                (~".push_@{index}")   { #push(@grid, @index); }
                (~".suffix_@{index}") { #suff(@grid, @index); }

                .loop(@index - 1);
            }

            .loop(@grid);

            .alpha { margin-left:  0; }
            .omega { margin-right: 0; }
        }
    }
}

/* Responsive-ness via media queries */
@media only screen and (min-width: 1px) and (max-width: @max_less) {
    #grid > #respond(@iPhone_portrait);

    // any [grid, prefix, pull, push, suffix] inside of any container force to block layout
    [class*="container"] {
        [class*="grid"]
        ,[class*="prefix"]
        ,[class*="pull"]
        ,[class*="push"]
        ,[class*="suffix"] {
            display: block;
            float: none;
            left: 0px;
            margin: 0px;
            padding: 0px;
            width: 100%;
        }
    }
}

@media only screen and (min-width: @iPhone_landscape) {#grid > #respond(@iPhone_landscape);}
@media only screen and (min-width: @iPad_portrait)    {#grid > #respond(@iPad_portrait);}
@media only screen and (min-width: @max_width)        {#grid > #respond(@max_width);}
